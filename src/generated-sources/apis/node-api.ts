/* tslint:disable */
/* eslint-disable */
/**
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 *
 * The version of the OpenAPI document: 0.8.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Conflict } from '../models';
// @ts-ignore
import type { Forbidden } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { NodeCreate } from '../models';
// @ts-ignore
import type { NodeModify } from '../models';
// @ts-ignore
import type { NodeResponse } from '../models';
// @ts-ignore
import type { NodeSettings } from '../models';
// @ts-ignore
import type { NodesUsageResponse } from '../models';
// @ts-ignore
import type { Unauthorized } from '../models';
/**
 * NodeApi - axios parameter creator
 * @export
 */
export const NodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new node to the database and optionally add it as a host.
         * @summary Add Node
         * @param {NodeCreate} nodeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode: async (nodeCreate: NodeCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeCreate' is not null or undefined
            assertParamExists('addNode', 'nodeCreate', nodeCreate)
            const localVarPath = `/api/node`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific node by its ID.
         * @summary Get Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNode: async (nodeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('getNode', 'nodeId', nodeId)
            const localVarPath = `/api/node/{node_id}`
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the current node settings, including TLS certificate.
         * @summary Get Node Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeSettings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/node/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all nodes. Accessible only to sudo admins.
         * @summary Get Nodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve usage statistics for nodes within a specified date range.
         * @summary Get Usage
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsage: async (start?: string, end?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/nodes/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a node\'s details. Only accessible to sudo admins.
         * @summary Modify Node
         * @param {number} nodeId 
         * @param {NodeModify} nodeModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyNode: async (nodeId: number, nodeModify: NodeModify, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('modifyNode', 'nodeId', nodeId)
            // verify required parameter 'nodeModify' is not null or undefined
            assertParamExists('modifyNode', 'nodeModify', nodeModify)
            const localVarPath = `/api/node/{node_id}`
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(nodeModify, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger a reconnection for the specified node. Only accessible to sudo admins.
         * @summary Reconnect Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconnectNode: async (nodeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('reconnectNode', 'nodeId', nodeId)
            const localVarPath = `/api/node/{node_id}/reconnect`
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a node and remove it from xray in the background.
         * @summary Remove Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNode: async (nodeId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('removeNode', 'nodeId', nodeId)
            const localVarPath = `/api/node/{node_id}`
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeApi - functional programming interface
 * @export
 */
export const NodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new node to the database and optionally add it as a host.
         * @summary Add Node
         * @param {NodeCreate} nodeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNode(nodeCreate: NodeCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNode(nodeCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.addNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details of a specific node by its ID.
         * @summary Get Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNode(nodeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNode(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.getNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the current node settings, including TLS certificate.
         * @summary Get Node Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodeSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodeSettings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.getNodeSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all nodes. Accessible only to sudo admins.
         * @summary Get Nodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.getNodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve usage statistics for nodes within a specified date range.
         * @summary Get Usage
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsage(start?: string, end?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodesUsageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsage(start, end, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.getUsage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a node\'s details. Only accessible to sudo admins.
         * @summary Modify Node
         * @param {number} nodeId 
         * @param {NodeModify} nodeModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyNode(nodeId: number, nodeModify: NodeModify, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyNode(nodeId, nodeModify, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.modifyNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trigger a reconnection for the specified node. Only accessible to sudo admins.
         * @summary Reconnect Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reconnectNode(nodeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reconnectNode(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.reconnectNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a node and remove it from xray in the background.
         * @summary Remove Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeNode(nodeId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeNode(nodeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NodeApi.removeNode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NodeApi - factory interface
 * @export
 */
export const NodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NodeApiFp(configuration)
    return {
        /**
         * Add a new node to the database and optionally add it as a host.
         * @summary Add Node
         * @param {NodeCreate} nodeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNode(nodeCreate: NodeCreate, options?: RawAxiosRequestConfig): AxiosPromise<NodeResponse> {
            return localVarFp.addNode(nodeCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific node by its ID.
         * @summary Get Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNode(nodeId: number, options?: RawAxiosRequestConfig): AxiosPromise<NodeResponse> {
            return localVarFp.getNode(nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the current node settings, including TLS certificate.
         * @summary Get Node Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeSettings(options?: RawAxiosRequestConfig): AxiosPromise<NodeSettings> {
            return localVarFp.getNodeSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all nodes. Accessible only to sudo admins.
         * @summary Get Nodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodes(options?: RawAxiosRequestConfig): AxiosPromise<Array<NodeResponse>> {
            return localVarFp.getNodes(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve usage statistics for nodes within a specified date range.
         * @summary Get Usage
         * @param {string} [start] 
         * @param {string} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsage(start?: string, end?: string, options?: RawAxiosRequestConfig): AxiosPromise<NodesUsageResponse> {
            return localVarFp.getUsage(start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a node\'s details. Only accessible to sudo admins.
         * @summary Modify Node
         * @param {number} nodeId 
         * @param {NodeModify} nodeModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyNode(nodeId: number, nodeModify: NodeModify, options?: RawAxiosRequestConfig): AxiosPromise<NodeResponse> {
            return localVarFp.modifyNode(nodeId, nodeModify, options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger a reconnection for the specified node. Only accessible to sudo admins.
         * @summary Reconnect Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reconnectNode(nodeId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.reconnectNode(nodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a node and remove it from xray in the background.
         * @summary Remove Node
         * @param {number} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeNode(nodeId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.removeNode(nodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NodeApi - object-oriented interface
 * @export
 * @class NodeApi
 * @extends {BaseAPI}
 */
export class NodeApi extends BaseAPI {
    /**
     * Add a new node to the database and optionally add it as a host.
     * @summary Add Node
     * @param {NodeCreate} nodeCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public addNode(nodeCreate: NodeCreate, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).addNode(nodeCreate, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Retrieve details of a specific node by its ID.
     * @summary Get Node
     * @param {number} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public getNode(nodeId: number, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).getNode(nodeId, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Retrieve the current node settings, including TLS certificate.
     * @summary Get Node Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public getNodeSettings(options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).getNodeSettings(options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Retrieve a list of all nodes. Accessible only to sudo admins.
     * @summary Get Nodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public getNodes(options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).getNodes(options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Retrieve usage statistics for nodes within a specified date range.
     * @summary Get Usage
     * @param {string} [start] 
     * @param {string} [end] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public getUsage(start?: string, end?: string, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).getUsage(start, end, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Update a node\'s details. Only accessible to sudo admins.
     * @summary Modify Node
     * @param {number} nodeId 
     * @param {NodeModify} nodeModify 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public modifyNode(nodeId: number, nodeModify: NodeModify, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).modifyNode(nodeId, nodeModify, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Trigger a reconnection for the specified node. Only accessible to sudo admins.
     * @summary Reconnect Node
     * @param {number} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public reconnectNode(nodeId: number, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).reconnectNode(nodeId, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Delete a node and remove it from xray in the background.
     * @summary Remove Node
     * @param {number} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public removeNode(nodeId: number, options?: RawAxiosRequestConfig) {
        return NodeApiFp(this.configuration).removeNode(nodeId, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }
}

