/* tslint:disable */
/* eslint-disable */
/**
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 *
 * The version of the OpenAPI document: 0.8.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Forbidden } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { ProxyHost } from '../models';
// @ts-ignore
import type { ProxyInbound } from '../models';
// @ts-ignore
import type { SystemStats } from '../models';
// @ts-ignore
import type { Unauthorized } from '../models';
/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of proxy hosts grouped by inbound tag.
         * @summary Get Hosts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/hosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve inbound configurations grouped by protocol.
         * @summary Get Inbounds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbounds: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/inbounds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch system stats including memory, CPU, and user metrics.
         * @summary Get System Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify proxy hosts and update the configuration.
         * @summary Modify Hosts
         * @param {{ [key: string]: Array<ProxyHost>; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyHosts: async (requestBody: { [key: string]: Array<ProxyHost>; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('modifyHosts', 'requestBody', requestBody)
            const localVarPath = `/api/hosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of proxy hosts grouped by inbound tag.
         * @summary Get Hosts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHosts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<ProxyHost>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHosts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.getHosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve inbound configurations grouped by protocol.
         * @summary Get Inbounds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInbounds(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<ProxyInbound>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInbounds(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.getInbounds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch system stats including memory, CPU, and user metrics.
         * @summary Get System Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.getSystemStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modify proxy hosts and update the configuration.
         * @summary Modify Hosts
         * @param {{ [key: string]: Array<ProxyHost>; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyHosts(requestBody: { [key: string]: Array<ProxyHost>; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<ProxyHost>; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyHosts(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.modifyHosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Get a list of proxy hosts grouped by inbound tag.
         * @summary Get Hosts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosts(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: Array<ProxyHost>; }> {
            return localVarFp.getHosts(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve inbound configurations grouped by protocol.
         * @summary Get Inbounds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInbounds(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: Array<ProxyInbound>; }> {
            return localVarFp.getInbounds(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch system stats including memory, CPU, and user metrics.
         * @summary Get System Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemStats(options?: RawAxiosRequestConfig): AxiosPromise<SystemStats> {
            return localVarFp.getSystemStats(options).then((request) => request(axios, basePath));
        },
        /**
         * Modify proxy hosts and update the configuration.
         * @summary Modify Hosts
         * @param {{ [key: string]: Array<ProxyHost>; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyHosts(requestBody: { [key: string]: Array<ProxyHost>; }, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: Array<ProxyHost>; }> {
            return localVarFp.modifyHosts(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Get a list of proxy hosts grouped by inbound tag.
     * @summary Get Hosts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getHosts(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).getHosts(options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Retrieve inbound configurations grouped by protocol.
     * @summary Get Inbounds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getInbounds(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).getInbounds(options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Fetch system stats including memory, CPU, and user metrics.
     * @summary Get System Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getSystemStats(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).getSystemStats(options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Modify proxy hosts and update the configuration.
     * @summary Modify Hosts
     * @param {{ [key: string]: Array<ProxyHost>; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public modifyHosts(requestBody: { [key: string]: Array<ProxyHost>; }, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).modifyHosts(requestBody, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }
}

