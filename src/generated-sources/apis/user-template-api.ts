/* tslint:disable */
/* eslint-disable */
/**
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 *
 * The version of the OpenAPI document: 0.8.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { UserTemplateCreate } from '../models';
// @ts-ignore
import type { UserTemplateModify } from '../models';
// @ts-ignore
import type { UserTemplateResponse } from '../models';
/**
 * UserTemplateApi - axios parameter creator
 * @export
 */
export const UserTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new user template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
         * @summary Add User Template
         * @param {UserTemplateCreate} userTemplateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserTemplate: async (userTemplateCreate: UserTemplateCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userTemplateCreate' is not null or undefined
            assertParamExists('addUserTemplate', 'userTemplateCreate', userTemplateCreate)
            const localVarPath = `/api/user_template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTemplateCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User Template information with id
         * @summary Get User Template Endpoint
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTemplateEndpoint: async (templateId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getUserTemplateEndpoint', 'templateId', templateId)
            const localVarPath = `/api/user_template/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of User Templates with optional pagination
         * @summary Get User Templates
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTemplates: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user_template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify User Template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
         * @summary Modify User Template
         * @param {number} templateId 
         * @param {UserTemplateModify} userTemplateModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyUserTemplate: async (templateId: number, userTemplateModify: UserTemplateModify, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('modifyUserTemplate', 'templateId', templateId)
            // verify required parameter 'userTemplateModify' is not null or undefined
            assertParamExists('modifyUserTemplate', 'userTemplateModify', userTemplateModify)
            const localVarPath = `/api/user_template/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTemplateModify, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a User Template by its ID
         * @summary Remove User Template
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserTemplate: async (templateId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('removeUserTemplate', 'templateId', templateId)
            const localVarPath = `/api/user_template/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTemplateApi - functional programming interface
 * @export
 */
export const UserTemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new user template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
         * @summary Add User Template
         * @param {UserTemplateCreate} userTemplateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserTemplate(userTemplateCreate: UserTemplateCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserTemplate(userTemplateCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTemplateApi.addUserTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get User Template information with id
         * @summary Get User Template Endpoint
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTemplateEndpoint(templateId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTemplateEndpoint(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTemplateApi.getUserTemplateEndpoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of User Templates with optional pagination
         * @summary Get User Templates
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTemplates(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTemplateResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTemplates(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTemplateApi.getUserTemplates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modify User Template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
         * @summary Modify User Template
         * @param {number} templateId 
         * @param {UserTemplateModify} userTemplateModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyUserTemplate(templateId: number, userTemplateModify: UserTemplateModify, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyUserTemplate(templateId, userTemplateModify, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTemplateApi.modifyUserTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a User Template by its ID
         * @summary Remove User Template
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserTemplate(templateId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserTemplate(templateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTemplateApi.removeUserTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserTemplateApi - factory interface
 * @export
 */
export const UserTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTemplateApiFp(configuration)
    return {
        /**
         * Add a new user template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
         * @summary Add User Template
         * @param {UserTemplateCreate} userTemplateCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserTemplate(userTemplateCreate: UserTemplateCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserTemplateResponse> {
            return localVarFp.addUserTemplate(userTemplateCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User Template information with id
         * @summary Get User Template Endpoint
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTemplateEndpoint(templateId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserTemplateResponse> {
            return localVarFp.getUserTemplateEndpoint(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of User Templates with optional pagination
         * @summary Get User Templates
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTemplates(offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserTemplateResponse>> {
            return localVarFp.getUserTemplates(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify User Template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
         * @summary Modify User Template
         * @param {number} templateId 
         * @param {UserTemplateModify} userTemplateModify 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyUserTemplate(templateId: number, userTemplateModify: UserTemplateModify, options?: RawAxiosRequestConfig): AxiosPromise<UserTemplateResponse> {
            return localVarFp.modifyUserTemplate(templateId, userTemplateModify, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a User Template by its ID
         * @summary Remove User Template
         * @param {number} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserTemplate(templateId: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.removeUserTemplate(templateId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserTemplateApi - object-oriented interface
 * @export
 * @class UserTemplateApi
 * @extends {BaseAPI}
 */
export class UserTemplateApi extends BaseAPI {
    /**
     * Add a new user template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
     * @summary Add User Template
     * @param {UserTemplateCreate} userTemplateCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTemplateApi
     */
    public addUserTemplate(userTemplateCreate: UserTemplateCreate, options?: RawAxiosRequestConfig) {
        return UserTemplateApiFp(this.configuration).addUserTemplate(userTemplateCreate, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Get User Template information with id
     * @summary Get User Template Endpoint
     * @param {number} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTemplateApi
     */
    public getUserTemplateEndpoint(templateId: number, options?: RawAxiosRequestConfig) {
        return UserTemplateApiFp(this.configuration).getUserTemplateEndpoint(templateId, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Get a list of User Templates with optional pagination
     * @summary Get User Templates
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTemplateApi
     */
    public getUserTemplates(offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return UserTemplateApiFp(this.configuration).getUserTemplates(offset, limit, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Modify User Template  - **name** can be up to 64 characters - **data_limit** must be in bytes and larger or equal to 0 - **expire_duration** must be in seconds and larger or equat to 0 - **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
     * @summary Modify User Template
     * @param {number} templateId 
     * @param {UserTemplateModify} userTemplateModify 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTemplateApi
     */
    public modifyUserTemplate(templateId: number, userTemplateModify: UserTemplateModify, options?: RawAxiosRequestConfig) {
        return UserTemplateApiFp(this.configuration).modifyUserTemplate(templateId, userTemplateModify, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }

    /**
     * Remove a User Template by its ID
     * @summary Remove User Template
     * @param {number} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTemplateApi
     */
    public removeUserTemplate(templateId: number, options?: RawAxiosRequestConfig) {
        return UserTemplateApiFp(this.configuration).removeUserTemplate(templateId, options).then((request) => request(this.axios, this.basePath)).then(({data}) => data);
    }
}

